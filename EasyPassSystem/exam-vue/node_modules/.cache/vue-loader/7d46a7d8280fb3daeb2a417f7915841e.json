{"remainingRequest":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\src\\views\\index\\Main.vue?vue&type=style&index=0&id=1c6d4f90&scoped=true&lang=scss&","dependencies":[{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\src\\views\\index\\Main.vue","mtime":1697027380953},{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":1686540615826},{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1686540617334},{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1686540615808},{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1686540610040},{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686540617114},{"path":"D:\\WEB\\EasyPass在线考试系统\\EasyPassSystem\\exam-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1686540616128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgIi4uLy4uL2Fzc2V0cy9jc3MvaW5kZXgvbWFpbiI7Cg=="},{"version":3,"sources":["Main.vue"],"names":[],"mappings":";AA8bA","file":"Main.vue","sourceRoot":"src/views/index","sourcesContent":["<template>\n  <el-container>\n    <!--用户头部菜单-->\n    <el-aside id=\"aside\" width=\"210px\">\n      <el-menu :default-active=\"activeMenu\" @select=\"handleSelect\" :router=\"true\" :collapse=\"isCollapse\"\n        style=\"background: linear-gradient(rgb(181, 208, 231), rgb(254, 255, 255));\">\n        <el-menu-item index=\"/index\" style=\"text-align: center\">\n          <i class=\"el-icon-sunny\"></i>\n          <strong slot=\"title\" style=\"color: black;\">\n            模拟考试系统\n          </strong>\n        </el-menu-item>\n\n        <!-- 单独的导航 -->\n        <el-menu-item @click=\"changeBreadInfo(menuInfo[0].topMenuName, menuInfo[0].topMenuName, menuInfo[0].url)\"\n          index=\"/dashboard\" v-if=\"!menuInfo[0].submenu\">\n          <i :class=\"menuInfo[0].topIcon\"></i>\n          <span slot=\"title\">{{ menuInfo[0].topMenuName }}</span>\n        </el-menu-item>\n\n        <!--具有子导航的-->\n        <el-submenu v-if=\"menu.submenu\" v-for=\"(menu, index) in menuInfo\" :key=\"index\" :index=\"index + ''\">\n          <template slot=\"title\">\n            <i :class=\"menu.topIcon\"></i>\n            <span slot=\"title\">{{ menu.topMenuName }}</span>\n          </template>\n\n          <!--子导航的分组  : 为v-bind属性绑定-->\n          <el-menu-item-group>\n            <el-menu-item @click=\"changeBreadInfo(menu.topMenuName, sub.name, sub.url)\" :index=\"sub.url\"\n              v-for=\"(sub, index) in menu.submenu\" :key=\"index\">\n              <i :class=\"sub.icon\"></i>\n              <span slot=\"title\">{{ sub.name }}</span>\n            </el-menu-item>\n          </el-menu-item-group>\n        </el-submenu>\n      </el-menu>\n    </el-aside>\n\n    <!--右侧的面板-->\n    <el-main>\n      <el-container>\n        <el-header height=\"100px\">\n          <el-card class=\"box-card\">\n            <div slot=\"header\">\n              <!-- 删除标签用到了【Tag】上的close事件，点击调用handleTag事件，\n              事件里调用mutation中的closeTag方法，遍历找到在tabList中与点击的路由相同name的项，\n              用数组中splice方法删除，state中的数据被删除了，页面渲染的【Tag】自己也删除了 -->\n              <!--面包屑\n              在组件内部，使用了两个 el-breadcrumb-item 元素，分别用于展示顶级和次级面包屑的内容。\n              这里使用了插值表达式（{{ }}）语法，将面包屑内容绑定到 breadInfo 对象的 top 和 sub\n              属性上进行展示。这里的 breadInfo 可能是从父组件中传递过来的，\n              在 Vue 的单向数据流中，子组件只能通过 props 接收来自父组件的数据。\n              -->\n              <el-breadcrumb style=\"margin-left: 15px\">\n                <el-breadcrumb-item>{{ breadInfo.top }}</el-breadcrumb-item>\n                <el-breadcrumb-item>{{ breadInfo.sub }}</el-breadcrumb-item>\n              </el-breadcrumb>\n\n              <!--右侧的个人信息下拉框-->\n              <el-dropdown trigger=\"click\" style=\"float: right;color: black;cursor:pointer;\" @command=\"handleCommand\">\n                <span class=\"el-dropdown-link\">\n                  {{ currentUserInfo.username }}\n                  <i class=\"el-icon-caret-bottom\"></i>\n                </span>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item command=\"personInfo\">个人资料</el-dropdown-item>\n                  <el-dropdown-item command=\"logout\">退出登录</el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n\n              <!--右侧的查看公告图标 @绑定事件-->\n              <el-tooltip effect=\"dark\" content=\"查看公告\" placement=\"top-start\">\n                <i class=\"el-icon-bell\" @click=\"showSystemNotice\" style=\"float: right;margin-right:10px;\n              margin-bottom:5px;cursor:pointer;font-size: 25px;font-weight: 100\"></i>\n              </el-tooltip>\n            </div>\n\n            <!--卡片面板的主内容-->\n            <div>\n              <el-tag @close=\"handleClose(index)\" v-for=\"(item, index) in tags\" type=\"info\" size=\"small\" :key=\"index\"\n                :class=\"item.highlight ? 'active' : ''\" :closable=\"item.name !== '首页'\"\n                @click=\"changeHighlightTag(item.name)\" effect=\"plain\">\n                <i class=\"el-icon-s-opportunity\" style=\"margin-right: 2px\" v-if=\"item.highlight\"></i>\n                {{ item.name }}\n              </el-tag>\n            </div>\n          </el-card>\n        </el-header>\n\n        <el-main style=\"margin-top: 25px;\">\n          <router-view @giveChildChangeBreakInfo=\"giveChildChangeBreakInfo\" @showSystemNotice=\"showSystemNotice\"\n            @giveChildAddTag=\"giveChildAddTag\" :tagInfo=\"tags\" @updateTagInfo=\"updateTagInfo\"></router-view>\n        </el-main>\n\n      </el-container>\n      <!-- 弹窗设计 -->\n      <el-dialog title=\"更新用户信息\" center :visible.sync=\"updateCurrentUserDialog\">\n\n        <el-form :model=\"currentUserInfo2\" :rules=\"updateUserFormRules\" ref=\"updateUserForm\">\n          <el-form-item label=\"用户名\">\n            <el-input v-model=\"currentUserInfo2.username\" disabled></el-input>\n          </el-form-item>\n\n          <el-form-item label=\"真实姓名\" prop=\"trueName\">\n            <el-input v-model=\"currentUserInfo2.trueName\"></el-input>\n          </el-form-item>\n\n          <el-form-item label=\"密码\" prop=\"password\">\n            <el-input v-model=\"currentUserInfo2.password\" placeholder=\"不更改请留空\"></el-input>\n          </el-form-item>\n\n        </el-form>\n\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"updateCurrentUserDialog = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"updateCurrentUser\">确 定</el-button>\n        </div>\n      </el-dialog>\n\n    </el-main>\n  </el-container>\n</template>\n\n<script>\nimport notice from '@/api/notice'\nimport menu from '@/api/menu'\nimport user from '@/api/user'\nimport auth from '@/api/auth'\nimport utils from '@/utils/utils'\n\nexport default {\n  name: 'Main',\n  data() {\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback()\n      } else if (value.length < 5) {\n        callback(new Error('新密码少于5位数!'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      // 菜单信息\n      menuInfo: [\n        {\n          'topIcon': '',\n          'url': '',\n          'children': [\n            {\n              'url': ''\n            }\n          ]\n        }\n      ],\n      // 面板是否收缩\n      isCollapse: false,\n      // 当前是否全屏显示\n      isFullScreen: false,\n      // 当前登录的用户信息\n      currentUserInfo: {\n        'username': ''\n      },\n      // 当前激活的菜单\n      activeMenu: '',\n      // 面包屑信息\n      breadInfo: {\n        'top': '首页',// 顶级菜单信息\n        'sub': '首页'// 当前的菜单信息\n      },\n      // 面包屑下的标签数据\n      tags: [\n        {\n          'name': '首页',\n          'url': '/dashboard',\n          'highlight': true\n        }\n      ],\n      // 跟新当前用户的信息的对话框\n      updateCurrentUserDialog: false,\n      // 当前用户的信息\n      currentUserInfo2: {},\n      // 更新信息表单信息\n      updateUserFormRules: {\n        trueName: [\n          {\n            required: true,\n            message: '请输入真实姓名',\n            trigger: 'blur'\n          }\n        ],\n        password: [\n          {\n            validator: validatePassword,\n            trigger: 'blur'\n          }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getMenu()\n    // 获取登录用户信息\n    this.getUserInfoByCheckToken()\n  },\n  mounted() {\n    // 根据当前链接的hash设置对应高亮的菜单\n    this.activeMenu = window.location.hash.substring(1)\n    document.querySelector('.el-container').style.maxHeight = screen.height + 'px'\n\n  },\n  watch: {\n    // 监察路径变化,改变菜单的高亮\n    '$route.path': function (o, n) {\n      this.activeMenu = o\n      // 如果没有该标签就创建改标签\n      let flag = false\n      // 判断是否含有改标签\n      this.tags.map(item => {\n        if (item.url === this.activeMenu) { // 如果有含有该标签\n          flag = true\n        }\n      })\n      if (!flag) { // 对应链接的标签不存在\n        // 先找到该标签的名字\n        this.createHighlightTag()\n      } else { // 改标签存在,则高亮\n        this.tags.map(item => {\n          // 取消高亮别的标签\n          item.highlight = false\n          // 高亮当前标签\n          if (item.url === this.activeMenu) {\n            item.highlight = true\n          }\n        })\n      }\n    }\n  },\n  methods: {\n    // 查看系统公告\n    showSystemNotice() {\n      notice.getCurrentNewNotice().then((resp) => {\n        if (resp.code === 200) {\n          this.$alert(resp.data, '最新公告', {\n            dangerouslyUseHTMLString: true,\n            closeOnPressEscape: true,\n            lockScroll: false\n          })\n        } else {\n          this.$notify({\n            title: 'Tips',\n            message: '公告获取失败',\n            type: 'error',\n            duration: 2000\n          })\n        }\n      })\n    },\n    // 根据token后台判断用户权限,传递相对应的菜单\n    getMenu() {\n      menu.getMenuInfo().then((resp) => {\n        if (resp.code === 200) {\n          this.menuInfo = JSON.parse(resp.data)\n          // 根据链接创建不存在的tag标签并高亮\n          this.createHighlightTag()\n        } else { // 后台认证失败,跳转登录页面\n          this.$message.error('权限认证失败')\n          this.$router.push('/')\n        }\n      })\n    },\n\n    // 处理右上角下拉菜单的处理事件\n    handleCommand(command) {\n      if (command === 'logout') { // 退出\n        this.logout()\n      } else if (command === 'personInfo') {\n        this.updateCurrentUserDialog = true\n        user.getCurrentUser().then((resp) => {\n          if (resp.code === 200) {\n            resp.data.password = ''\n            this.currentUserInfo2 = resp.data\n          }\n        })\n      }\n    },\n    // 退出登录\n    async logout() {\n      window.localStorage.removeItem('authorization')\n      // 右侧提示通知\n      this.$notify({\n        title: 'Tips',\n        message: '注销成功',\n        type: 'success',\n        duration: 2000\n      })\n      await this.$router.push('/')\n    },\n    // 检查token获取其中的用户信息\n    getUserInfoByCheckToken() {\n      auth.checkToken().then(resp => {\n        this.currentUserInfo = resp.data\n        localStorage.setItem('username', this.currentUserInfo.username)\n      }).catch(err => {\n        this.$notify({\n          title: 'Tips',\n          message: err.response.data.errMsg,\n          type: 'error',\n          duration: 2000\n        })\n        localStorage.removeItem('authorization')\n        this.$router.push('/')\n      })\n    },\n    // 关闭tag标签\n    handleClose(index) { // 当前点击的tag的下标\n      if (this.tags[index].highlight) {\n        this.tags[index - 1].highlight = true\n        // 关闭之后,路由调跳转,高亮菜单和标签\n        this.$router.push(this.tags[index - 1].url)\n        this.handleSelect(this.tags[index - 1].url)\n      }\n      this.tags.splice(index, 1)\n    },\n    // 菜单的高亮变化\n    handleSelect(currentMenu) {\n      this.activeMenu = currentMenu\n    },\n    // 处理面包屑信息和面包屑下的标签信息\n    changeBreadInfo(curTopMenuName, curMenuName, url) {\n      // 面包屑信息\n      this.breadInfo.top = curTopMenuName\n      this.breadInfo.sub = curMenuName\n      // 标签信息\n      let flag = false// 当前是否有此菜单信息(防止无限点击,无线生成)\n      this.tags.map(item => {\n        if (item.name === curMenuName) flag = true\n      })\n      if (!flag) { // 不存在当前点击的菜单\n        this.tags.push({\n          'name': curMenuName,\n          'url': url,\n          'highlight': true\n        })\n      } // 高亮菜单tag\n      this.changeHighlightTag(curMenuName)\n    },\n    // 处理高亮的tag\n    changeHighlightTag(curMenuName) { // 当前需要高亮的名字\n      let curMenu\n      this.tags.map((item, i) => {\n        if (item.name === curMenuName) curMenu = item\n        item.highlight = item.name === curMenuName\n      })\n      // 调用改变面包屑的方法\n      this.changeTopBreakInfo(curMenu.name)\n      this.$router.push(curMenu.url)\n    },\n    // 创建当前高亮的tags\n    createHighlightTag() {\n      // 根据链接创建不存在的tag标签并高亮\n      let menuName\n      this.menuInfo.map(item => {\n        if (item.submenu !== undefined) {\n          item.submenu.map(subItem => {\n            if (subItem.url === this.activeMenu) menuName = subItem.name\n          })\n        }\n      })\n      if (menuName !== undefined && this.tags.indexOf(menuName) === -1) {\n        this.tags.push({\n          'name': menuName,\n          'url': this.activeMenu,\n          'highlight': true\n        })\n        // 高亮对应的标签\n        this.tags.map(item => {\n          if (item.url === window.location.hash.substring(1)) this.changeHighlightTag(item.name)\n        })\n      }\n    },\n    // 改变头部的面包屑信息\n    changeTopBreakInfo(subMenuName) {\n      let topMenuName\n      this.menuInfo.map(item => {\n        if (item.submenu !== undefined) {\n          item.submenu.map(i2 => {\n            if (i2.name === subMenuName) topMenuName = item.topMenuName\n          })\n        }\n      })\n      this.breadInfo.top = topMenuName\n      this.breadInfo.sub = subMenuName\n    },\n    // 提供给子组件改变面包屑最后的信息\n    giveChildChangeBreakInfo(subMenuName, topMenuName) {\n      this.breadInfo.sub = subMenuName\n      this.breadInfo.top = topMenuName\n    },\n    // 提供给子组件创建tag标签使用\n    giveChildAddTag(menuName, url) {\n      this.tags.map(item => {\n        item.highlight = false\n      })\n      this.tags.push({\n        'name': menuName,\n        'url': url,\n        'highlight': true\n      })\n    },\n    // 提供给子组件修改tag标签使用\n    updateTagInfo(menuName, url) {\n      this.tags.map((item, index) => {\n        item.highlight = false\n        if (item.name === menuName) {\n          this.tags.splice(index, 1)\n        }\n      })\n      this.tags.push({\n        'name': menuName,\n        'url': url,\n        'highlight': true\n      })\n    },\n    // 更新当前用户\n    updateCurrentUser() {\n      utils.validFormAndInvoke(this.$refs['updateUserForm'], () => {\n        user.updateCurrentUser(this.currentUserInfo2).then((resp) => {\n          if (resp.code === 200) {\n            this.$notify({\n              title: 'Tips',\n              message: resp.message,\n              type: 'success',\n              duration: 2000\n            })\n            this.logout()\n          }\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../../assets/css/index/main\";\n</style>\n"]}]}